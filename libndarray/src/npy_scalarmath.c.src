/* -*- c -*- */

/* These functions support the scalar math module which adds faster math 
   for array scalars that does not go through the ufunc machinery
   but still supports error-modes.
*/

#include "npy_api.h"
#include "npy_config.h"
#include "npy_common.h"
#include "npy_ufunc_object.h"
#include "npy_utils.h"

#define byte npy_byte
#define ubyte npy_ubyte
#define ushort npy_ushort
#define uint npy_uint
#define ulong npy_ulong
#define ulonglong npy_ulonglong
#define longlong npy_longlong
#define longdouble npy_longdouble
#define cfloat npy_cfloat
#define cdouble npy_cdouble
#define clongdouble npy_clongdouble


#if NPY_SIZEOF_LONGLONG == 64 || NPY_SIZEOF_LONGLONG == 128
static int ulonglong_overflow(ulonglong a, ulonglong b)
{
    ulonglong ah, al, bh, bl, w, x, y, z;

#if NPY_SIZEOF_LONGLONG == 64
    ah = (a >> 32);
    al = (a & 0xFFFFFFFFL);
    bh = (b >> 32);
    bl = (b & 0xFFFFFFFFL);
#elif NPY_SIZEOF_LONGLONG == 128
    ah = (a >> 64);
    al = (a & 0xFFFFFFFFFFFFFFFFL);
    bh = (b >> 64);
    bl = (b & 0xFFFFFFFFFFFFFFFFL);
#else
    ah = al = bh = bl = 0;
#endif

    /* 128-bit product:  z*2**64 + (x+y)*2**32 + w  */
    w = al*bl;
    x = bh*al;
    y = ah*bl;
    z = ah*bh;

    /* *c = ((x + y)<<32) + w; */
#if NPY_SIZEOF_LONGLONG == 64
    return z || (x>>32) || (y>>32) ||
        (((x & 0xFFFFFFFFL) + (y & 0xFFFFFFFFL) + (w >> 32)) >> 32);
#elif NPY_SIZEOF_LONGLONG == 128
    return z || (x>>64) || (y>>64) ||
        (((x & 0xFFFFFFFFFFFFFFFFL) + (y & 0xFFFFFFFFFFFFFFFFL) + (w >> 64)) >> 64);
#else
    return 0;
#endif

}
#else
static int ulonglong_overflow(ulonglong NPY_UNUSED(a), ulonglong NPY_UNUSED(b))
{
    return 0;
}
#endif

static int slonglong_overflow(longlong a0, longlong b0)
{
    ulonglong a, b;
    ulonglong ah, al, bh, bl, w, x, y, z;

    /* Convert to non-negative quantities */
    if (a0 < 0) {
        a = -a0;
    }
    else {
        a = a0;
    }
    if (b0 < 0) {
        b = -b0;
    }
    else {
        b = b0;
    }


#if NPY_SIZEOF_LONGLONG == 64
    ah = (a >> 32);
    al = (a & 0xFFFFFFFFL);
    bh = (b >> 32);
    bl = (b & 0xFFFFFFFFL);
#elif NPY_SIZEOF_LONGLONG == 128
    ah = (a >> 64);
    al = (a & 0xFFFFFFFFFFFFFFFFL);
    bh = (b >> 64);
    bl = (b & 0xFFFFFFFFFFFFFFFFL);
#else
    ah = al = bh = bl = 0;
#endif

    w = al*bl;
    x = bh*al;
    y = ah*bl;
    z = ah*bh;

    /*
      ulonglong c = ((x + y)<<32) + w;
      if ((a0 < 0) ^ (b0 < 0))
      *c = -c;
      else
      *c = c
      */

#if NPY_SIZEOF_LONGLONG == 64
    return z || (x>>31) || (y>>31) ||
        (((x & 0xFFFFFFFFL) + (y & 0xFFFFFFFFL) + (w >> 32)) >> 31);
#elif NPY_SIZEOF_LONGLONG == 128
    return z || (x>>63) || (y>>63) ||
        (((x & 0xFFFFFFFFFFFFFFFFL) + (y & 0xFFFFFFFFFFFFFFFFL) + (w >> 64)) >> 63);
#else
    return 0;
#endif
}
/** end direct numarray code **/


/* Basic operations:
 *
 *  BINARY:
 *
 * add, subtract, multiply, divide, remainder, divmod, power,
 * floor_divide, true_divide
 *
 * lshift, rshift, and, or, xor (integers only)
 *
 * UNARY:
 *
 * negative, positive, absolute, nonzero, invert, int, long, float, oct, hex
 *
 */

/**begin repeat
 * #name = float, double, longdouble#
 */
NDARRAY_API npy_@name@ (*npy_basic_@name@_floor)(npy_@name@);
NDARRAY_API npy_@name@ (*npy_basic_@name@_sqrt)(npy_@name@);
NDARRAY_API npy_@name@ (*npy_basic_@name@_fmod)(npy_@name@, npy_@name@);
/**end repeat**/

/**begin repeat
 *  #name = byte, short, int, long, longlong#
 */
NDARRAY_API void
npy_@name@_ctype_add(@name@ a, @name@ b, @name@ *out) {
    *out = a + b;
    if ((*out^a) >= 0 || (*out^b) >= 0) {
        return;
    }
    generate_overflow_error();
    return;
}
NDARRAY_API void
npy_@name@_ctype_subtract(@name@ a, @name@ b, @name@ *out) {
    *out = a - b;
    if ((*out^a) >= 0 || (*out^~b) >= 0) {
        return;
    }
    generate_overflow_error();
    return;
}
/**end repeat**/

/**begin repeat
 *  #name = ubyte, ushort, uint, ulong, ulonglong#
 */
NDARRAY_API void
npy_@name@_ctype_add(@name@ a, @name@ b, @name@ *out) {
    *out = a + b;
    if (*out >= a && *out >= b) {
        return;
    }
    generate_overflow_error();
    return;
}
NDARRAY_API void
npy_@name@_ctype_subtract(@name@ a, @name@ b, @name@ *out) {
    *out = a - b;
    if (a >= b) {
        return;
    }
    generate_overflow_error();
    return;
}
/**end repeat**/

#ifndef NPY_SIZEOF_BYTE
#define NPY_SIZEOF_BYTE 1
#endif

/**begin repeat
 *
 * #name = byte, ubyte, short, ushort, int, uint, long, ulong#
 * #big = (int,uint)*2, (longlong,ulonglong)*2#
 * #NAME = BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG#
 * #SIZENAME = BYTE*2, SHORT*2, INT*2, LONG*2#
 * #SIZE = INT*4,LONGLONG*4#
 * #neg = (1,0)*4#
 */
#if NPY_SIZEOF_@SIZE@ > NPY_SIZEOF_@SIZENAME@
NDARRAY_API void
npy_@name@_ctype_multiply(@name@ a, @name@ b, @name@ *out) {
    @big@ temp;
    temp = ((@big@) a) * ((@big@) b);
    *out = (@name@) temp;
#if @neg@
    if (temp > NPY_MAX_@NAME@ || temp < NPY_MIN_@NAME@)
#else
        if (temp > NPY_MAX_@NAME@)
#endif
            generate_overflow_error();
    return;
}
#endif
/**end repeat**/

/**begin repeat
 *
 * #name = int, uint, long, ulong, longlong, ulonglong#
 * #SIZE = INT*2, LONG*2, LONGLONG*2#
 * #char = (s,u)*3#
 */
#if NPY_SIZEOF_LONGLONG == NPY_SIZEOF_@SIZE@
NDARRAY_API void
npy_@name@_ctype_multiply(@name@ a, @name@ b, @name@ *out) {
    *out = a * b;
    if (@char@longlong_overflow(a, b)) {
        generate_overflow_error();
    }
    return;
}
#endif
/**end repeat**/

/**begin repeat
 *
 * #name = byte, ubyte, short, ushort, int, uint, long,
 *         ulong, longlong, ulonglong#
 * #neg = (1,0)*5#
 */
NDARRAY_API void
npy_@name@_ctype_divide(@name@ a, @name@ b, @name@ *out) {
    if (b == 0) {
        generate_divbyzero_error();
        *out = 0;
    }
#if @neg@
    else if (b == -1 && a < 0 && a == -a) {
        generate_overflow_error();
        *out = a / b;
    }
#endif
    else {
#if @neg@
        @name@ tmp;
        tmp = a / b;
        if (((a > 0) != (b > 0)) && (a % b != 0)) {
            tmp--;
        }
        *out = tmp;
#else
        *out = a / b;
#endif
    }
}

#define @name@_ctype_floor_divide @name@_ctype_divide
NDARRAY_API void
npy_@name@_ctype_remainder(@name@ a, @name@ b, @name@ *out) {
    if (a == 0 || b == 0) {
        if (b == 0) generate_divbyzero_error();
        *out = 0;
        return;
    }
#if @neg@
    else if ((a > 0) == (b > 0)) {
        *out = a % b;
    }
    else {
        /* handled like Python does */
        *out = a % b;
        if (*out) *out += b;
    }
#else
    *out = a % b;
#endif
}
/**end repeat**/

/**begin repeat
 *
 * #name = byte, ubyte, short, ushort, int, uint, long,
 *         ulong, longlong, ulonglong#
 * #otyp = float*4, double*6#
 */
#define @name@_ctype_true_divide(a, b, out)     \
    *(out) = ((@otyp@) (a)) / ((@otyp@) (b));
/**end repeat**/

/* b will always be positive in this call */
/**begin repeat
 *
 * #name = byte, ubyte, short, ushort, int, uint, long, ulong, longlong, ulonglong#
 * #upc = BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, LONGLONG, ULONGLONG#
 */
NDARRAY_API void
npy_@name@_ctype_power(@name@ a, @name@ b, @name@ *out) {
    @name@ temp, ix, mult;
    /* code from Python's intobject.c, with overflow checking removed. */
    temp = a;
    ix = 1;
    while (b > 0) {
        if (b & 1) {
            npy_@name@_ctype_multiply(ix, temp, &mult);
            ix = mult;
            if (temp == 0) {
                break;
            }
        }
        b >>= 1;        /* Shift exponent down by 1 bit */
        if (b==0) {
            break;
        }
        /* Square the value of temp */
        npy_@name@_ctype_multiply(temp, temp, &mult);
        temp = mult;
    }
    *out = ix;
}
/**end repeat**/




/**begin repeat
 * #name = float, double, longdouble#
 */
NDARRAY_API void
npy_@name@_ctype_remainder(@name@ a, @name@ b, @name@ *out) {
    @name@ mod;
    mod = npy_basic_@name@_fmod(a, b);
    if (mod && (((b < 0) != (mod < 0)))) {
        mod += b;
    }
    *out = mod;
}
/**end repeat**/


/**begin repeat
 * #name = float, double, longdouble#
 */
NDARRAY_API @name@ (*npy_basic_@name@_pow)(@name@ a, @name@ b);
NDARRAY_API void
npy_@name@_ctype_power(@name@ a, @name@ b, @name@ *out) {
    *out = npy_basic_@name@_pow(a, b);
}
/**end repeat**/

/**begin repeat
 * #name = byte, ubyte, short, ushort, int, uint, long, ulong, longlong,
 *         ulonglong, float, double, longdouble#
 * #uns = (0,1)*5,0*3#
 */
NDARRAY_API void
npy_@name@_ctype_negative(@name@ a, @name@ *out)
{
#if @uns@
    generate_overflow_error();
#endif
    *out = -a;
}
/**end repeat**/


/**begin repeat
 * #name = cfloat, cdouble, clongdouble#
 */
NDARRAY_API void
npy_@name@_ctype_negative(@name@ a, @name@ *out)
{
    out->real = -a.real;
    out->imag = -a.imag;
}
/**end repeat**/

/**begin repeat
 * #name = byte, ubyte, short, ushort, int, uint, long, ulong, longlong,
 *         ulonglong, float, double, longdouble#
 */
NDARRAY_API void
npy_@name@_ctype_positive(@name@ a, @name@ *out)
{
    *out = a;
}
/**end repeat**/

/*
 * Get the nc_powf, nc_pow, and nc_powl functions from
 * the data area of the power ufunc in umathmodule.
 */

/**begin repeat
 * #name = cfloat, cdouble, clongdouble#
 */
NDARRAY_API void
npy_@name@_ctype_positive(@name@ a, @name@ *out)
{
    out->real = a.real;
    out->imag = a.imag;
}
NDARRAY_API void (*npy_basic_@name@_pow)(@name@ *, @name@ *, @name@ *);
NDARRAY_API void
npy_@name@_ctype_power(@name@ a, @name@ b, @name@ *out)
{
    npy_basic_@name@_pow(&a, &b, out);
}
/**end repeat**/


/**begin repeat
 * #name = ubyte, ushort, uint, ulong, ulonglong#
 */
#define @name@_ctype_absolute @name@_ctype_positive
/**end repeat**/


/**begin repeat
 * #name = byte, short, int, long, longlong, float, double, longdouble#
 */
NDARRAY_API void
npy_@name@_ctype_absolute(@name@ a, @name@ *out)
{
    *out = (a < 0 ? -a : a);
}
/**end repeat**/

/**begin repeat
 * #name = cfloat, cdouble, clongdouble#
 * #rname = float, double, longdouble#
 */
NDARRAY_API void
npy_@name@_ctype_absolute(@name@ a, @rname@ *out)
{
    *out = npy_basic_@rname@_sqrt(a.real*a.real + a.imag*a.imag);
}
/**end repeat**/

/**begin repeat
 * #name = byte, ubyte, short, ushort, int, uint, long,
 *         ulong, longlong, ulonglong#
 */
#define @name@_ctype_invert(a, out) *(out) = ~a;
/**end repeat**/


