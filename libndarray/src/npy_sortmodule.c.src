/* -*- c -*- */

/*
 * The purpose of this module is to add faster sort functions
 * that are type-specific.  This is done by altering the
 * function table for the builtin descriptors.
 *
 * These sorting functions are copied almost directly from numarray
 * with a few modifications (complex comparisons compare the imaginary
 * part if the real parts are equal, for example), and the names
 * are changed.
 *
 * The original sorting code is due to Charles R. Harris who wrote
 * it for numarray.
 */

/*
 * Quick sort is usually the fastest, but the worst case scenario can
 * be slower than the merge and heap sorts.  The merge sort requires
 * extra memory and so for large arrays may not be useful.
 *
 * The merge sort is *stable*, meaning that equal components
 * are unmoved from their entry versions, so it can be used to
 * implement lexigraphic sorting on multiple keys.
 *
 * The heap sort is included for completeness.
 */

#define NOT_USED NPY_UNUSED(unused)

#include "string.h"
#include "npy_os.h"
#include "npy_api.h"
#include "npy_math.h"
#include "npy_config.h"
#include "npy_sortmodule.h"
#include "npy_arrayobject.h"


#define PYA_QS_STACK 100
#define SMALL_QUICKSORT 15
#define SMALL_MERGESORT 20
#define SMALL_STRING 16


static void NpyErr_NoMemory()
{
    NpyErr_SetString(NpyExc_MemoryError, "no memory");
}

/*
 *****************************************************************************
 **                        SWAP MACROS                                      **
 *****************************************************************************
 */

/**begin repeat
 *
 * #TYPE = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, FLOAT, DOUBLE, LONGDOUBLE, CFLOAT,
 *         CDOUBLE,CLONGDOUBLE, INTP#
 * #type = npy_bool, npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int,
 *         npy_uint, npy_long, npy_ulong, npy_longlong, npy_ulonglong,
 *         npy_float, npy_double, npy_longdouble, npy_cfloat, npy_cdouble,
 *         npy_clongdouble, npy_intp#
 */
#define @TYPE@_SWAP(a,b) {@type@ tmp = (b); (b)=(a); (a) = tmp;}

/**end repeat**/

/*
 *****************************************************************************
 **                        COMPARISON FUNCTIONS                             **
 *****************************************************************************
 */

/**begin repeat
 *
 * #TYPE = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG#
 * #type = npy_bool, npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint, npy_long, npy_ulong,
 *         npy_longlong, npy_ulonglong#
 */
NDARRAY_API int
npy_@TYPE@_LT(@type@ a, @type@ b)
{
    return a < b;
}
/**end repeat**/


/**begin repeat
 *
 * #TYPE = FLOAT, DOUBLE, LONGDOUBLE#
 * #type = npy_float, npy_double, npy_longdouble#
 */
NDARRAY_API int
npy_@TYPE@_LT(@type@ a, @type@ b)
{
    return a < b || (b != b && a == a);
}
/**end repeat**/


/*
 * For inline functions SUN recommends not using a return in the then part
 * of an if statement. It's a SUN compiler thing, so assign the return value
 * to a variable instead.
 */

/**begin repeat
 *
 * #TYPE = CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #type = npy_cfloat, npy_cdouble, npy_clongdouble#
 */
NDARRAY_API int
npy_@TYPE@_LT(@type@ a, @type@ b)
{
    int ret;
    
    if (a.real < b.real) {
        ret = a.imag == a.imag || b.imag != b.imag;
    }
    else if (a.real > b.real) {
        ret = b.imag != b.imag && a.imag == a.imag;
    }
    else if (a.real == b.real || (a.real != a.real && b.real != b.real)) {
        ret =  a.imag < b.imag || (b.imag != b.imag && a.imag == a.imag);
    }
    else {
        ret = b.real != b.real;
    }
    
    return ret;
}
/**end repeat**/


NDARRAY_API void
npy_STRING_COPY(char *s1, char *s2, size_t len)
{
    memcpy(s1, s2, len);
}


NDARRAY_API void
npy_STRING_SWAP(char *s1, char *s2, size_t len)
{
    while(len--) {
        const char t = *s1;
        *s1++ = *s2;
        *s2++ = t;
    }
}


NDARRAY_API int
npy_STRING_LT(char *s1, char *s2, size_t len)
{
    const unsigned char *c1 = (unsigned char *)s1;
    const unsigned char *c2 = (unsigned char *)s2;
    size_t i;
    int ret = 0;
    
    for (i = 0; i < len; ++i) {
        if (c1[i] != c2[i]) {
            ret = c1[i] < c2[i];
            break;
        }
    }
    return ret;
}


NDARRAY_API void
npy_UNICODE_COPY(npy_ucs4 *s1, npy_ucs4 *s2, size_t len)
{
    while(len--) {
        *s1++ = *s2++;
    }
}


NDARRAY_API void
npy_UNICODE_SWAP(npy_ucs4 *s1, npy_ucs4 *s2, size_t len)
{
    while(len--) {
        const npy_ucs4 t = *s1;
        *s1++ = *s2;
        *s2++ = t;
    }
}


NDARRAY_API int
npy_UNICODE_LT(npy_ucs4 *s1, npy_ucs4 *s2, size_t len)
{
    size_t i;
    int ret = 0;
    
    for (i = 0; i < len; ++i) {
        if (s1[i] != s2[i]) {
            ret = s1[i] < s2[i];
            break;
        }
    }
    return ret;
}


/*
 *****************************************************************************
 **                            NUMERIC SORTS                                **
 *****************************************************************************
 */


/**begin repeat
 *
 * #TYPE = BOOL, BYTE, UBYTE, SHORT, USHORT, INT, UINT, LONG, ULONG,
 *         LONGLONG, ULONGLONG, FLOAT, DOUBLE, LONGDOUBLE,
 *         CFLOAT, CDOUBLE, CLONGDOUBLE#
 * #type = npy_bool, npy_byte, npy_ubyte, npy_short, npy_ushort, npy_int, npy_uint, npy_long, npy_ulong,
 *         npy_longlong, npy_ulonglong, npy_float, npy_double, npy_longdouble,
 *         npy_cfloat, npy_cdouble, npy_clongdouble#
 */


NDARRAY_API int
npy_@TYPE@_quicksort(@type@ *start, npy_intp num, void *NOT_USED)
{
    @type@ *pl = start;
    @type@ *pr = start + num - 1;
    @type@ vp;
    @type@ *stack[PYA_QS_STACK], **sptr = stack, *pm, *pi, *pj, *pk;
    
    for (;;) {
        while ((pr - pl) > SMALL_QUICKSORT) {
            /* quicksort partition */
            pm = pl + ((pr - pl) >> 1);
            if (npy_@TYPE@_LT(*pm, *pl)) npy_@TYPE@_SWAP(*pm, *pl);
            if (npy_@TYPE@_LT(*pr, *pm)) npy_@TYPE@_SWAP(*pr, *pm);
            if (npy_@TYPE@_LT(*pm, *pl)) npy_@TYPE@_SWAP(*pm, *pl);
            vp = *pm;
            pi = pl;
            pj = pr - 1;
            npy_@TYPE@_SWAP(*pm, *pj);
            for (;;) {
                do ++pi; while (npy_@TYPE@_LT(*pi, vp));
                do --pj; while (npy_@TYPE@_LT(vp, *pj));
                if (pi >= pj) {
                    break;
                }
                npy_@TYPE@_SWAP(*pi,*pj);
            }
            pk = pr - 1;
            npy_@TYPE@_SWAP(*pi, *pk);
            /* push largest partition on stack */
            if (pi - pl < pr - pi) {
                *sptr++ = pi + 1;
                *sptr++ = pr;
                pr = pi - 1;
            }
            else {
                *sptr++ = pl;
                *sptr++ = pi - 1;
                pl = pi + 1;
            }
        }
        
        /* insertion sort */
        for (pi = pl + 1; pi <= pr; ++pi) {
            vp = *pi;
            pj = pi;
            pk = pi - 1;
            while (pj > pl && npy_@TYPE@_LT(vp, *pk)) {
                *pj-- = *pk--;
            }
            *pj = vp;
        }
        if (sptr == stack) {
            break;
        }
        pr = *(--sptr);
        pl = *(--sptr);
    }
    
    return 0;
}

NDARRAY_API int
npy_@TYPE@_aquicksort(@type@ *v, npy_intp* tosort, npy_intp num, void *NOT_USED)
{
    @type@ vp;
    npy_intp *pl, *pr;
    npy_intp *stack[PYA_QS_STACK], **sptr=stack, *pm, *pi, *pj, *pk, vi;
    
    pl = tosort;
    pr = tosort + num - 1;
    
    for (;;) {
        while ((pr - pl) > SMALL_QUICKSORT) {
            /* quicksort partition */
            pm = pl + ((pr - pl) >> 1);
            if (npy_@TYPE@_LT(v[*pm],v[*pl])) INTP_SWAP(*pm,*pl);
            if (npy_@TYPE@_LT(v[*pr],v[*pm])) INTP_SWAP(*pr,*pm);
            if (npy_@TYPE@_LT(v[*pm],v[*pl])) INTP_SWAP(*pm,*pl);
            vp = v[*pm];
            pi = pl;
            pj = pr - 1;
            INTP_SWAP(*pm,*pj);
            for (;;) {
                do ++pi; while (npy_@TYPE@_LT(v[*pi],vp));
                do --pj; while (npy_@TYPE@_LT(vp,v[*pj]));
                if (pi >= pj) {
                    break;
                }
                INTP_SWAP(*pi,*pj);
            }
            pk = pr - 1;
            INTP_SWAP(*pi,*pk);
            /* push largest partition on stack */
            if (pi - pl < pr - pi) {
                *sptr++ = pi + 1;
                *sptr++ = pr;
                pr = pi - 1;
            }
            else {
                *sptr++ = pl;
                *sptr++ = pi - 1;
                pl = pi + 1;
            }
        }
        
        /* insertion sort */
        for (pi = pl + 1; pi <= pr; ++pi) {
            vi = *pi;
            vp = v[vi];
            pj = pi;
            pk = pi - 1;
            while (pj > pl && npy_@TYPE@_LT(vp, v[*pk])) {
                *pj-- = *pk--;
            }
            *pj = vi;
        }
        if (sptr == stack) {
            break;
        }
        pr = *(--sptr);
        pl = *(--sptr);
    }
    
    return 0;
}


NDARRAY_API int
npy_@TYPE@_heapsort(@type@ *start, npy_intp n, void *NOT_USED)
{
    @type@ tmp, *a;
    npy_intp i,j,l;
    
    /* The array needs to be offset by one for heapsort indexing */
    a = start - 1;
    
    for (l = n>>1; l > 0; --l) {
        tmp = a[l];
        for (i = l, j = l<<1; j <= n;) {
            if (j < n && npy_@TYPE@_LT(a[j], a[j+1])) {
                j += 1;
            }
            if (npy_@TYPE@_LT(tmp, a[j])) {
                a[i] = a[j];
                i = j;
                j += j;
            }
            else {
                break;
            }
        }
        a[i] = tmp;
    }
    
    for (; n > 1;) {
        tmp = a[n];
        a[n] = a[1];
        n -= 1;
        for (i = 1, j = 2; j <= n;) {
            if (j < n && npy_@TYPE@_LT(a[j], a[j+1])) {
                j++;
            }
            if (npy_@TYPE@_LT(tmp, a[j])) {
                a[i] = a[j];
                i = j;
                j += j;
            }
            else {
                break;
            }
        }
        a[i] = tmp;
    }
    
    return 0;
}

NDARRAY_API int
npy_@TYPE@_aheapsort(@type@ *v, npy_intp *tosort, npy_intp n, void *NOT_USED)
{
    npy_intp *a, i,j,l, tmp;
    /* The arrays need to be offset by one for heapsort indexing */
    a = tosort - 1;
    
    for (l = n>>1; l > 0; --l) {
        tmp = a[l];
        for (i = l, j = l<<1; j <= n;) {
            if (j < n && npy_@TYPE@_LT(v[a[j]], v[a[j+1]])) {
                j += 1;
            }
            if (npy_@TYPE@_LT(v[tmp], v[a[j]])) {
                a[i] = a[j];
                i = j;
                j += j;
            }
            else {
                break;
            }
        }
        a[i] = tmp;
    }
    
    for (; n > 1;) {
        tmp = a[n];
        a[n] = a[1];
        n -= 1;
        for (i = 1, j = 2; j <= n;) {
            if (j < n && npy_@TYPE@_LT(v[a[j]], v[a[j+1]])) {
                j++;
            }
            if (npy_@TYPE@_LT(v[tmp], v[a[j]])) {
                a[i] = a[j];
                i = j;
                j += j;
            }
            else {
                break;
            }
        }
        a[i] = tmp;
    }
    
    return 0;
}

NDARRAY_API void
npy_@TYPE@_mergesort0(@type@ *pl, @type@ *pr, @type@ *pw)
{
    @type@ vp, *pi, *pj, *pk, *pm;
    
    if (pr - pl > SMALL_MERGESORT) {
        /* merge sort */
        pm = pl + ((pr - pl) >> 1);
        npy_@TYPE@_mergesort0(pl, pm, pw);
        npy_@TYPE@_mergesort0(pm, pr, pw);
        for (pi = pw, pj = pl; pj < pm;) {
            *pi++ = *pj++;
        }
        pj = pw;
        pk = pl;
        while (pj < pi && pm < pr) {
            if (npy_@TYPE@_LT(*pm,*pj)) {
                *pk = *pm++;
            }
            else {
                *pk = *pj++;
            }
            pk++;
        }
        while(pj < pi) {
            *pk++ = *pj++;
        }
    }
    else {
        /* insertion sort */
        for (pi = pl + 1; pi < pr; ++pi) {
            vp = *pi;
            pj = pi;
            pk = pi -1;
            while (pj > pl && npy_@TYPE@_LT(vp, *pk)) {
                *pj-- = *pk--;
            }
            *pj = vp;
        }
    }
}

NDARRAY_API int
npy_@TYPE@_mergesort(@type@ *start, npy_intp num, void *NOT_USED)
{
    @type@ *pl, *pr, *pw;
    
    pl = start;
    pr = pl + num;
    pw = (@type@ *) NpyDataMem_NEW((num/2)*sizeof(@type@));
    if (!pw) {
        NpyErr_NoMemory();
        return -1;
    }
    npy_@TYPE@_mergesort0(pl, pr, pw);
    
    NpyDataMem_FREE(pw);
    return 0;
}

NDARRAY_API void
npy_@TYPE@_amergesort0(npy_intp *pl, npy_intp *pr, @type@ *v, npy_intp *pw)
{
    @type@ vp;
    npy_intp vi, *pi, *pj, *pk, *pm;
    
    if (pr - pl > SMALL_MERGESORT) {
        /* merge sort */
        pm = pl + ((pr - pl + 1)>>1);
        npy_@TYPE@_amergesort0(pl,pm-1,v,pw);
        npy_@TYPE@_amergesort0(pm,pr,v,pw);
        for (pi = pw, pj = pl; pj < pm; ++pi, ++pj) {
            *pi = *pj;
        }
        for (pk = pw, pm = pl; pk < pi && pj <= pr; ++pm) {
            if (npy_@TYPE@_LT(v[*pj],v[*pk])) {
                *pm = *pj;
                ++pj;
            }
            else {
                *pm = *pk;
                ++pk;
            }
        }
        for (; pk < pi; ++pm, ++pk) {
            *pm = *pk;
        }
    }
    else {
        /* insertion sort */
        for (pi = pl + 1; pi <= pr; ++pi) {
            vi = *pi;
            vp = v[vi];
            for (pj = pi, pk = pi - 1; pj > pl && npy_@TYPE@_LT(vp, v[*pk]); --pj, --pk) {
                *pj = *pk;
            }
            *pj = vi;
        }
    }
}

NDARRAY_API int
npy_@TYPE@_amergesort(@type@ *v, npy_intp *tosort, npy_intp num, void *NOT_USED)
{
    npy_intp *pl, *pr, *pw;
    
    pl = tosort; pr = pl + num - 1;
    pw = NpyDimMem_NEW((1+num/2));
    
    if (!pw) {
        NpyErr_NoMemory();
        return -1;
    }
    
    npy_@TYPE@_amergesort0(pl, pr, v, pw);
    NpyDimMem_FREE(pw);
    
    return 0;
}


/**end repeat**/

/*
 *****************************************************************************
 **                             STRING SORTS                                **
 *****************************************************************************
 */


/**begin repeat
 *
 * #TYPE = STRING, UNICODE#
 * #type = char, NpyArray_UCS4#
 */

NDARRAY_API void
npy_@TYPE@_mergesort0(@type@ *pl, @type@ *pr, @type@ *pw, @type@ *vp, size_t len)
{
    @type@ *pi, *pj, *pk, *pm;
    
    if ((size_t)(pr - pl) > SMALL_MERGESORT*len) {
        /* merge sort */
        pm = pl + (((pr - pl)/len) >> 1)*len;
        npy_@TYPE@_mergesort0(pl, pm, pw, vp, len);
        npy_@TYPE@_mergesort0(pm, pr, pw, vp, len);
        npy_@TYPE@_COPY(pw, pl, pm - pl);
        pi = pw + (pm - pl);
        pj = pw;
        pk = pl;
        while (pj < pi && pm < pr) {
            if (npy_@TYPE@_LT(pm, pj, len)) {
                npy_@TYPE@_COPY(pk, pm, len);
                pm += len;
            }
            else {
                npy_@TYPE@_COPY(pk, pj, len);
                pj += len;
            }
            pk += len;
        }
        npy_@TYPE@_COPY(pk, pj, pi - pj);
    }
    else {
        /* insertion sort */
        for (pi = pl + len; pi < pr; pi += len) {
            npy_@TYPE@_COPY(vp, pi, len);
            pj = pi;
            pk = pi - len;
            while (pj > pl && npy_@TYPE@_LT(vp, pk, len)) {
                npy_@TYPE@_COPY(pj, pk, len);
                pj -= len;
                pk -= len;
            }
            npy_@TYPE@_COPY(pj, vp, len);
        }
    }
}

NDARRAY_API int
npy_@TYPE@_mergesort(@type@ *start, npy_intp num, NpyArray *arr)
{
    const size_t elsize = NpyArray_ITEMSIZE(arr);
    const size_t len = elsize / sizeof(@type@);
    @type@ *pl, *pr, *pw, *vp;
    int err = 0;
    
    pl = start;
    pr = pl + num*len;
    pw = (@type@ *) NpyDataMem_NEW((num/2)*elsize);
    if (!pw) {
        NpyErr_NoMemory();
        err = -1;
        goto fail_0;
    }
    vp = (@type@ *) NpyDataMem_NEW(elsize);
    if (!vp) {
        NpyErr_NoMemory();
        err = -1;
        goto fail_1;
    }
    npy_@TYPE@_mergesort0(pl, pr, pw, vp, len);
    
    NpyDataMem_FREE(vp);
fail_1:
    NpyDataMem_FREE(pw);
fail_0:
    return err;
}

NDARRAY_API int
npy_@TYPE@_quicksort(@type@ *start, npy_intp num, NpyArray *arr)
{
    const size_t len = NpyArray_ITEMSIZE(arr)/sizeof(@type@);
    @type@ *vp = malloc(NpyArray_ITEMSIZE(arr));
    @type@ *pl = start;
    @type@ *pr = start + (num - 1)*len;
    @type@ *stack[PYA_QS_STACK], **sptr = stack, *pm, *pi, *pj, *pk;
    
    for (;;) {
        while ((size_t)(pr - pl) > SMALL_QUICKSORT*len) {
            /* quicksort partition */
            pm = pl + (((pr - pl)/len) >> 1)*len;
            if (npy_@TYPE@_LT(pm, pl, len)) npy_@TYPE@_SWAP(pm, pl, len);
            if (npy_@TYPE@_LT(pr, pm, len)) npy_@TYPE@_SWAP(pr, pm, len);
            if (npy_@TYPE@_LT(pm, pl, len)) npy_@TYPE@_SWAP(pm, pl, len);
            npy_@TYPE@_COPY(vp, pm, len);
            pi = pl;
            pj = pr - len;
            npy_@TYPE@_SWAP(pm, pj, len);
            for (;;) {
                do pi += len; while (npy_@TYPE@_LT(pi, vp, len));
                do pj -= len; while (npy_@TYPE@_LT(vp, pj, len));
                if (pi >= pj) {
                    break;
                }
                npy_@TYPE@_SWAP(pi, pj, len);
            }
            pk = pr - len;
            npy_@TYPE@_SWAP(pi, pk, len);
            /* push largest partition on stack */
            if (pi - pl < pr - pi) {
                *sptr++ = pi + len;
                *sptr++ = pr;
                pr = pi - len;
            }
            else {
                *sptr++ = pl;
                *sptr++ = pi - len;
                pl = pi + len;
            }
        }
        
        /* insertion sort */
        for (pi = pl + len; pi <= pr; pi += len) {
            npy_@TYPE@_COPY(vp, pi, len);
            pj = pi;
            pk = pi - len;
            while (pj > pl && npy_@TYPE@_LT(vp, pk, len)) {
                npy_@TYPE@_COPY(pj, pk, len);
                pj -= len;
                pk -= len;
            }
            npy_@TYPE@_COPY(pj, vp, len);
        }
        if (sptr == stack) {
            break;
        }
        pr = *(--sptr);
        pl = *(--sptr);
    }
    
    free(vp);
    return 0;
}


NDARRAY_API int
npy_@TYPE@_heapsort(@type@ *start, npy_intp n, NpyArray *arr)
{
    size_t len = NpyArray_ITEMSIZE(arr)/sizeof(@type@);
    @type@ *tmp = malloc(NpyArray_ITEMSIZE(arr));
    @type@ *a = start - len;
    npy_intp i,j,l;
    
    for (l = n>>1; l > 0; --l) {
        npy_@TYPE@_COPY(tmp, a + l*len, len);
        for (i = l, j = l<<1; j <= n;) {
            if (j < n && npy_@TYPE@_LT(a + j*len, a + (j+1)*len, len))
                j += 1;
            if (npy_@TYPE@_LT(tmp, a + j*len, len)) {
                npy_@TYPE@_COPY(a + i*len, a + j*len, len);
                i = j;
                j += j;
            }
            else {
                break;
            }
        }
        npy_@TYPE@_COPY(a + i*len, tmp, len);
    }
    
    for (; n > 1;) {
        npy_@TYPE@_COPY(tmp, a + n*len, len);
        npy_@TYPE@_COPY(a + n*len, a + len, len);
        n -= 1;
        for (i = 1, j = 2; j <= n;) {
            if (j < n && npy_@TYPE@_LT(a + j*len, a + (j+1)*len, len))
                j++;
            if (npy_@TYPE@_LT(tmp, a + j*len, len)) {
                npy_@TYPE@_COPY(a + i*len, a + j*len, len);
                i = j;
                j += j;
            }
            else {
                break;
            }
        }
        npy_@TYPE@_COPY(a + i*len, tmp, len);
    }
    
    free(tmp);
    return 0;
}


NDARRAY_API int
npy_@TYPE@_aheapsort(@type@ *v, npy_intp *tosort, npy_intp n, NpyArray *arr)
{
    size_t len = NpyArray_ITEMSIZE(arr)/sizeof(@type@);
    npy_intp *a, i,j,l, tmp;
    
    /* The array needs to be offset by one for heapsort indexing */
    a = tosort - 1;
    
    for (l = n>>1; l > 0; --l) {
        tmp = a[l];
        for (i = l, j = l<<1; j <= n;) {
            if (j < n && npy_@TYPE@_LT(v + a[j]*len, v + a[j+1]*len, len))
                j += 1;
            if (npy_@TYPE@_LT(v + tmp*len, v + a[j]*len, len)) {
                a[i] = a[j];
                i = j;
                j += j;
            }
            else {
                break;
            }
        }
        a[i] = tmp;
    }
    
    for (; n > 1;) {
        tmp = a[n];
        a[n] = a[1];
        n -= 1;
        for (i = 1, j = 2; j <= n;) {
            if (j < n && npy_@TYPE@_LT(v + a[j]*len, v + a[j+1]*len, len))
                j++;
            if (npy_@TYPE@_LT(v + tmp*len, v + a[j]*len, len)) {
                a[i] = a[j];
                i = j;
                j += j;
            }
            else {
                break;
            }
        }
        a[i] = tmp;
    }
    
    return 0;
}


NDARRAY_API int
npy_@TYPE@_aquicksort(@type@ *v, npy_intp* tosort, npy_intp num, NpyArray *arr)
{
    size_t len = NpyArray_ITEMSIZE(arr)/sizeof(@type@);
    @type@ *vp;
    npy_intp *pl = tosort;
    npy_intp *pr = tosort + num - 1;
    npy_intp *stack[PYA_QS_STACK];
    npy_intp **sptr=stack;
    npy_intp *pm, *pi, *pj, *pk, vi;
    
    for (;;) {
        while ((pr - pl) > SMALL_QUICKSORT) {
            /* quicksort partition */
            pm = pl + ((pr - pl) >> 1);
            if (npy_@TYPE@_LT(v + (*pm)*len, v + (*pl)*len, len)) INTP_SWAP(*pm, *pl);
            if (npy_@TYPE@_LT(v + (*pr)*len, v + (*pm)*len, len)) INTP_SWAP(*pr, *pm);
            if (npy_@TYPE@_LT(v + (*pm)*len, v + (*pl)*len, len)) INTP_SWAP(*pm, *pl);
            vp = v + (*pm)*len;
            pi = pl;
            pj = pr - 1;
            INTP_SWAP(*pm,*pj);
            for (;;) {
                do ++pi; while (npy_@TYPE@_LT(v + (*pi)*len, vp, len));
                do --pj; while (npy_@TYPE@_LT(vp, v + (*pj)*len, len));
                if (pi >= pj) {
                    break;
                }
                INTP_SWAP(*pi,*pj);
            }
            pk = pr - 1;
            INTP_SWAP(*pi,*pk);
            /* push largest partition on stack */
            if (pi - pl < pr - pi) {
                *sptr++ = pi + 1;
                *sptr++ = pr;
                pr = pi - 1;
            }
            else {
                *sptr++ = pl;
                *sptr++ = pi - 1;
                pl = pi + 1;
            }
        }
        
        /* insertion sort */
        for (pi = pl + 1; pi <= pr; ++pi) {
            vi = *pi;
            vp = v + vi*len;
            pj = pi;
            pk = pi - 1;
            while (pj > pl && npy_@TYPE@_LT(vp, v + (*pk)*len, len)) {
                *pj-- = *pk--;
            }
            *pj = vi;
        }
        if (sptr == stack) {
            break;
        }
        pr = *(--sptr);
        pl = *(--sptr);
    }
    
    return 0;
}


NDARRAY_API void
npy_@TYPE@_amergesort0(npy_intp *pl, npy_intp *pr, @type@ *v, npy_intp *pw, int len)
{
    @type@ *vp;
    npy_intp vi, *pi, *pj, *pk, *pm;
    
    if (pr - pl > SMALL_MERGESORT) {
        /* merge sort */
        pm = pl + ((pr - pl) >> 1);
        npy_@TYPE@_amergesort0(pl,pm,v,pw,len);
        npy_@TYPE@_amergesort0(pm,pr,v,pw,len);
        for (pi = pw, pj = pl; pj < pm;) {
            *pi++ = *pj++;
        }
        pj = pw;
        pk = pl;
        while (pj < pi && pm < pr) {
            if (npy_@TYPE@_LT(v + (*pm)*len, v + (*pj)*len, len)) {
                *pk = *pm++;
            } else {
                *pk = *pj++;
            }
            pk++;
        }
        while (pj < pi) {
            *pk++ = *pj++;
        }
    } else {
        /* insertion sort */
        for (pi = pl + 1; pi < pr; ++pi) {
            vi = *pi;
            vp = v + vi*len;
            pj = pi;
            pk = pi -1;
            while (pj > pl && npy_@TYPE@_LT(vp, v + (*pk)*len, len)) {
                *pj-- = *pk--;
            }
            *pj = vi;
        }
    }
}


NDARRAY_API int
npy_@TYPE@_amergesort(@type@ *v, npy_intp *tosort, npy_intp num, NpyArray *arr)
{
    const size_t elsize = NpyArray_ITEMSIZE(arr);
    const size_t len = elsize / sizeof(@type@);
    npy_intp *pl, *pr, *pw;
    
    pl = tosort;
    pr = pl + num;
    pw = NpyDimMem_NEW(num/2);
    if (!pw) {
        NpyErr_NoMemory();
        return -1;
    }
    npy_@TYPE@_amergesort0(pl, pr, v, pw, len);
    
    NpyDimMem_FREE(pw);
    return 0;
}
/**end repeat**/
