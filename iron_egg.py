# This file performs the installation step once the build is complete.
# Installation primarily involves copying the build results to the
# IronPython site-packages directory.

import os
import zipfile
from os.path import join


config_txt = """# this file is generated by iron_egg.py
__all__ = ["show"]
_config = {}
def show():
    print 'Numpy for IronPython'
"""

version_txt = """# this file is generated by ironsetup.py
short_version = '2.0.0'
version = '2.0.0'
full_version= '2.0.0.dev-unknown'
git_revision = 'unknown'
release = False

if not release:
    version = full_version
"""

spec_txt = """\
metadata_version = '1.1'
name = 'numpy'
version = '2.0.0'
build = 1

arch = None
platform = 'cli'
osdist = None
python = None
packages = []
"""

def build_egg():
    print "BUILDING NUMPY EGG ..."

    z = zipfile.ZipFile('numpy-2.0.0-1.egg', 'w', zipfile.ZIP_DEFLATED)

    ignore_libs = ["Microsoft.Scripting.dll",
                   "Microsoft.Scripting.Metadata.dll",
                   "Microsoft.Dynamic.dll",
                   "IronPython.dll",
                   "IronPython.Modules.dll"]

    # Recursively walk the numpy tree and add all files to the egg
    for root, dirs, files in os.walk("numpy"):
        for fn in files:
            path = join(root, fn)
            if fn.endswith('.py'):
                arcname = path.replace('\\', '/')
                if fn.endswith('_clr.py'):
                    arcname = arcname[:-7] + '.py'
                z.write(path, arcname)

            elif fn.endswith('.dll') and fn not in ignore_libs:
                z.write(path, 'EGG-INFO/prefix/DLLs/' + fn)

    z.write(r'libndarray\windows\bin\Debug\ndarray.dll',
            'EGG-INFO/prefix/DLLs/ndarray.dll')
    z.writestr('numpy/__config__.py', config_txt)
    z.writestr('numpy/version.py', version_txt)
    z.writestr('EGG-INFO/spec/depend', spec_txt)
    z.close()


if __name__ == '__main__':
    build_egg()
